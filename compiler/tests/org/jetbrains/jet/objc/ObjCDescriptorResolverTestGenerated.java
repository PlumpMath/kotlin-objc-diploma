/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.objc;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.objc.AbstractObjCDescriptorResolverTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/objc/resolve")
@InnerTestClasses({ObjCDescriptorResolverTestGenerated.Hierarchy.class, ObjCDescriptorResolverTestGenerated.Methods.class})
public class ObjCDescriptorResolverTestGenerated extends AbstractObjCDescriptorResolverTest {
    public void testAllFilesPresentInResolve() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/objc/resolve"), Pattern.compile("^(.+)\\.h$"), true);
    }
    
    @TestMetadata("simpleCategory.h")
    public void testSimpleCategory() throws Exception {
        doTest("compiler/testData/objc/resolve/simpleCategory.h");
    }
    
    @TestMetadata("simpleClass.h")
    public void testSimpleClass() throws Exception {
        doTest("compiler/testData/objc/resolve/simpleClass.h");
    }
    
    @TestMetadata("simpleProtocol.h")
    public void testSimpleProtocol() throws Exception {
        doTest("compiler/testData/objc/resolve/simpleProtocol.h");
    }
    
    @TestMetadata("compiler/testData/objc/resolve/hierarchy")
    @InnerTestClasses({Hierarchy.MetaclassInheritance.class})
    public static class Hierarchy extends AbstractObjCDescriptorResolverTest {
        public void testAllFilesPresentInHierarchy() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/objc/resolve/hierarchy"), Pattern.compile("^(.+)\\.h$"), true);
        }
        
        @TestMetadata("classAdoptsProtocol.h")
        public void testClassAdoptsProtocol() throws Exception {
            doTest("compiler/testData/objc/resolve/hierarchy/classAdoptsProtocol.h");
        }
        
        @TestMetadata("classAdoptsTwoProtocols.h")
        public void testClassAdoptsTwoProtocols() throws Exception {
            doTest("compiler/testData/objc/resolve/hierarchy/classAdoptsTwoProtocols.h");
        }
        
        @TestMetadata("superClass.h")
        public void testSuperClass() throws Exception {
            doTest("compiler/testData/objc/resolve/hierarchy/superClass.h");
        }
        
        @TestMetadata("superProtocol.h")
        public void testSuperProtocol() throws Exception {
            doTest("compiler/testData/objc/resolve/hierarchy/superProtocol.h");
        }
        
        @TestMetadata("superTwoProtocols.h")
        public void testSuperTwoProtocols() throws Exception {
            doTest("compiler/testData/objc/resolve/hierarchy/superTwoProtocols.h");
        }
        
        @TestMetadata("compiler/testData/objc/resolve/hierarchy/metaclassInheritance")
        public static class MetaclassInheritance extends AbstractObjCDescriptorResolverTest {
            public void testAllFilesPresentInMetaclassInheritance() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/objc/resolve/hierarchy/metaclassInheritance"), Pattern.compile("^(.+)\\.h$"), true);
            }
            
            @TestMetadata("classAndProtocol.h")
            public void testClassAndProtocol() throws Exception {
                doTest("compiler/testData/objc/resolve/hierarchy/metaclassInheritance/classAndProtocol.h");
            }
            
            @TestMetadata("protocol.h")
            public void testProtocol() throws Exception {
                doTest("compiler/testData/objc/resolve/hierarchy/metaclassInheritance/protocol.h");
            }
            
            @TestMetadata("simple.h")
            public void testSimple() throws Exception {
                doTest("compiler/testData/objc/resolve/hierarchy/metaclassInheritance/simple.h");
            }
            
            @TestMetadata("simpleWithMethods.h")
            public void testSimpleWithMethods() throws Exception {
                doTest("compiler/testData/objc/resolve/hierarchy/metaclassInheritance/simpleWithMethods.h");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Hierarchy");
            suite.addTestSuite(Hierarchy.class);
            suite.addTestSuite(MetaclassInheritance.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/objc/resolve/methods")
    public static class Methods extends AbstractObjCDescriptorResolverTest {
        public void testAllFilesPresentInMethods() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/objc/resolve/methods"), Pattern.compile("^(.+)\\.h$"), true);
        }
        
        @TestMetadata("classMethods.h")
        public void testClassMethods() throws Exception {
            doTest("compiler/testData/objc/resolve/methods/classMethods.h");
        }
        
        @TestMetadata("instanceMethods.h")
        public void testInstanceMethods() throws Exception {
            doTest("compiler/testData/objc/resolve/methods/instanceMethods.h");
        }
        
        @TestMetadata("protocolClassMethod.h")
        public void testProtocolClassMethod() throws Exception {
            doTest("compiler/testData/objc/resolve/methods/protocolClassMethod.h");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("ObjCDescriptorResolverTestGenerated");
        suite.addTestSuite(ObjCDescriptorResolverTestGenerated.class);
        suite.addTest(Hierarchy.innerSuite());
        suite.addTestSuite(Methods.class);
        return suite;
    }
}
